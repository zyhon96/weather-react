{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","message","setMessage","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","cod","catch","err","console","log","name","sys","country","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLACMA,EAEC,mCAFDA,EAGE,0CA2EOC,MAzEf,WAAgB,IAAD,IAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIiBJ,mBAAS,IAJ1B,mBAINK,EAJM,KAIGC,EAJH,KAyBPC,EAAc,SAACC,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,IAGpC,OACE,qBAAKE,UAAmC,oBAAhBd,EAAQe,MAAyBf,EAAQe,KAAKC,KAAO,GAAM,WAAsB,MAAzG,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,qBACZC,SAAU,SAAAC,GAAC,OAAIrB,EAASqB,EAAEC,OAAOC,QACjCA,MAAOxB,EACPyB,WAzCK,SAAAC,GAEG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAI/B,EAAJ,sBAA0BG,EAA1B,+BAAsDH,IACxDgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,GAAmB,QAAfA,EAAOC,IAIT,OAHA9B,EAAW,IACXE,EAAW,sBACXJ,EAAS,IAGXE,EAAW6B,GACX/B,EAAS,OACRiC,OAAM,SAAAC,GACPC,QAAQC,IAAIF,WA6BI,MAAhBjC,EAAQ+B,IACR,gCACE,sBAAKjB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2Bd,EAAQoC,KAAnC,eAA2CpC,EAAQqC,WAAnD,aAA2C,EAAaC,WACxD,qBAAKxB,UAAU,OAAf,SAAuBV,EAAY,IAAImC,WAGzC,sBAAKzB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG0B,KAAKC,MAAMzC,EAAQe,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0Bd,EAAQA,QAAQ,GAAGe,aAG9C,sBAAKD,UAAU,eAAf,UACH,qBAAKA,UAAU,WAAf,SAA2BZ,IAC3B,qBAAKY,UAAU,OAAf,SAAuBV,EAAY,IAAImC,iBC3DlCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6fac1a29.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n\n  key: \"6f768d6651a07c265fcdf14e190ea805\",\n  base: \"https://api.openweathermap.org/data/2.5\"\n}\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [message, setMessage] = useState('');\n  const search = evt => {\n\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}/weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          if (result.cod === '404') {\n            setWeather('');\n            setMessage('No city found');\n            setQuery('');\n            return;\n          }\n          setWeather(result);\n          setQuery('');\n        }).catch(err => {\n          console.log(err);\n        })\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search For City...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(weather.cod === 200) ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys?.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°c\n              </div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (<div className=\"location-box\">\n          <div className=\"location\">{message}</div>\n          <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}